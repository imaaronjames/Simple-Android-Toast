require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"androidToast":[function(require,module,exports){
exports.toast = function(toastMessage, toastSize) {
  var heightMult, toastBG, toastText;
  heightMult = 1;
  if (toastSize === "isTwoLines") {
    heightMult = 1.44;
  }
  if (toastSize === "isThreeLines") {
    heightMult = 1.88;
  }
  toastBG = new Layer({
    midX: Screen.width / 2,
    maxY: Screen.height - 96,
    width: 864,
    height: 144 * heightMult,
    borderRadius: 72,
    backgroundColor: "rgba(50,50,50,100)",
    opacity: 0,
    shadowX: 0,
    shadowY: 0,
    shadowBlur: 6,
    shadowColor: "rgba(0,0,0,0.24)"
  });
  toastBG.states.add({
    on: {
      opacity: 1
    },
    off: {
      opacity: 0
    }
  });
  toastBG.states.animationOptions = {
    curve: "ease-out",
    time: 0.4
  };
  toastText = new Layer({
    midX: toastBG.width / 2,
    y: 42,
    width: toastBG.width - 144,
    height: toastBG.height - 88,
    backgroundColor: null,
    superLayer: toastBG
  });
  toastText.html = toastMessage;
  toastText.style = {
    "font-size": "42px",
    "line-height": "60px",
    "font-family": "Roboto-Regular, Arial, sans-serif",
    "color": "#fff"
  };
  toastBG.states["switch"]("on");
  return toastBG.on(Events.AnimationEnd, function() {
    return Utils.delay(4, function() {
      toastBG.states["switch"]("off");
      return toastBG.on(Events.AnimationEnd, function() {
        return this.destroy();
      });
    });
  });
};


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvYWFyb25qYW1lcy9Ecm9wYm94L0ZyYW1lci9TaW1wbGUtQW5kcm9pZC1Ub2FzdC9hbmRyb2lkVG9hc3QtU2FtcGxlLVByb2plY3QuZnJhbWVyL21vZHVsZXMvYW5kcm9pZFRvYXN0LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ2FBLE9BQU8sQ0FBQyxLQUFSLEdBQWdCLFNBQUMsWUFBRCxFQUFlLFNBQWY7QUFDZixNQUFBO0VBQUEsVUFBQSxHQUFhO0VBQ2IsSUFBRyxTQUFBLEtBQWEsWUFBaEI7SUFBa0MsVUFBQSxHQUFhLEtBQS9DOztFQUNBLElBQUcsU0FBQSxLQUFhLGNBQWhCO0lBQW9DLFVBQUEsR0FBYSxLQUFqRDs7RUFHQSxPQUFBLEdBQWMsSUFBQSxLQUFBLENBQ2I7SUFBQSxJQUFBLEVBQU0sTUFBTSxDQUFDLEtBQVAsR0FBZSxDQUFyQjtJQUF3QixJQUFBLEVBQU0sTUFBTSxDQUFDLE1BQVAsR0FBZ0IsRUFBOUM7SUFDQSxLQUFBLEVBQU8sR0FEUDtJQUNZLE1BQUEsRUFBUSxHQUFBLEdBQU0sVUFEMUI7SUFFQSxZQUFBLEVBQWMsRUFGZDtJQUdBLGVBQUEsRUFBaUIsb0JBSGpCO0lBSUEsT0FBQSxFQUFTLENBSlQ7SUFLQSxPQUFBLEVBQVMsQ0FMVDtJQUtZLE9BQUEsRUFBUyxDQUxyQjtJQUt3QixVQUFBLEVBQVksQ0FMcEM7SUFLdUMsV0FBQSxFQUFhLGtCQUxwRDtHQURhO0VBT2QsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFmLENBQ0M7SUFBQSxFQUFBLEVBQUk7TUFBQSxPQUFBLEVBQVMsQ0FBVDtLQUFKO0lBQ0EsR0FBQSxFQUFLO01BQUEsT0FBQSxFQUFTLENBQVQ7S0FETDtHQUREO0VBR0EsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZixHQUNDO0lBQUEsS0FBQSxFQUFPLFVBQVA7SUFDQSxJQUFBLEVBQU0sR0FETjs7RUFJRCxTQUFBLEdBQWdCLElBQUEsS0FBQSxDQUNmO0lBQUEsSUFBQSxFQUFNLE9BQU8sQ0FBQyxLQUFSLEdBQWdCLENBQXRCO0lBQXlCLENBQUEsRUFBRyxFQUE1QjtJQUNBLEtBQUEsRUFBTyxPQUFPLENBQUMsS0FBUixHQUFnQixHQUR2QjtJQUM0QixNQUFBLEVBQVEsT0FBTyxDQUFDLE1BQVIsR0FBaUIsRUFEckQ7SUFFQSxlQUFBLEVBQWlCLElBRmpCO0lBR0EsVUFBQSxFQUFZLE9BSFo7R0FEZTtFQUtoQixTQUFTLENBQUMsSUFBVixHQUFpQjtFQUNqQixTQUFTLENBQUMsS0FBVixHQUNDO0lBQUEsV0FBQSxFQUFhLE1BQWI7SUFDQSxhQUFBLEVBQWUsTUFEZjtJQUVBLGFBQUEsRUFBZSxtQ0FGZjtJQUdBLE9BQUEsRUFBUyxNQUhUOztFQU1ELE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBRCxDQUFkLENBQXNCLElBQXRCO1NBQ0EsT0FBTyxDQUFDLEVBQVIsQ0FBVyxNQUFNLENBQUMsWUFBbEIsRUFBZ0MsU0FBQTtXQUMvQixLQUFLLENBQUMsS0FBTixDQUFZLENBQVosRUFBZSxTQUFBO01BQ2QsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFELENBQWQsQ0FBc0IsS0FBdEI7YUFDQSxPQUFPLENBQUMsRUFBUixDQUFXLE1BQU0sQ0FBQyxZQUFsQixFQUFnQyxTQUFBO2VBQy9CLElBQUksQ0FBQyxPQUFMLENBQUE7TUFEK0IsQ0FBaEM7SUFGYyxDQUFmO0VBRCtCLENBQWhDO0FBbkNlIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIiMgTW9kdWxlIGNyZWF0ZWQgYnkgQWFyb24gSmFtZXMgfCBOb3ZlbWJlciAyMXRoLCAyMDE1XG4jXG4jIEJlZm9yZSB1c2luZyB0aGlzZSBtb2R1bGUsIG1ha2Ugc3VyZSB0byBoYXZlIHRoZSBmb250IFJvYm90by1SZWd1bGFyIGluc3RhbGxlZFxuI1xuIyBBZGQgdGhlIGZvbGxvd2luZyBsaW5lIGF0IHRoZSB0b3Agb2YgeW91ciBwcm9qZWN0IHRvIGFjY2VzcyB0aGlzIG1vZHVsZTpcbiMgYW5kcm9pZCA9IHJlcXVpcmUgXCJhbmRyb2lkVG9hc3RcIlxuI1xuIyBSZWZlcmVuY2UgdGhlIGNvbnRlbnRzIGJ5IHVzaW5nIHRoaXMgZnVuY3Rpb246XG4jIGFuZHJvaWQudG9hc3QoXCJCeSBkZWZhdWx0LCB0b2FzdHMgYXJlIG9uZSBsaW5lLlwiKVxuI1xuIyBBdmFpbGFibGUgb3B0aW9uczpcbiMgdG9hc3RTaXplOiBpc1R3b0xpbmVzIG9yIGlzVGhyZWVMaW5lcyB3aWxsIGNoYW5nZSB0aGUgc2l6ZSBvZiB0aGUgdG9hc3QgdG8gZml0IG11bHRpcGxlIGxpbmVzLlxuXG5leHBvcnRzLnRvYXN0ID0gKHRvYXN0TWVzc2FnZSwgdG9hc3RTaXplKSAtPlxuXHRoZWlnaHRNdWx0ID0gMVxuXHRpZiB0b2FzdFNpemUgPT0gXCJpc1R3b0xpbmVzXCIgdGhlbiBoZWlnaHRNdWx0ID0gMS40NFxuXHRpZiB0b2FzdFNpemUgPT0gXCJpc1RocmVlTGluZXNcIiB0aGVuIGhlaWdodE11bHQgPSAxLjg4XG5cblx0IyMgQ3JlYXRlIHRvYXN0IEJHIGxheWVyXG5cdHRvYXN0QkcgPSBuZXcgTGF5ZXJcblx0XHRtaWRYOiBTY3JlZW4ud2lkdGggLyAyLCBtYXhZOiBTY3JlZW4uaGVpZ2h0IC0gOTZcblx0XHR3aWR0aDogODY0LCBoZWlnaHQ6IDE0NCAqIGhlaWdodE11bHRcblx0XHRib3JkZXJSYWRpdXM6IDcyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBcInJnYmEoNTAsNTAsNTAsMTAwKVwiXG5cdFx0b3BhY2l0eTogMFxuXHRcdHNoYWRvd1g6IDAsIHNoYWRvd1k6IDAsIHNoYWRvd0JsdXI6IDYsIHNoYWRvd0NvbG9yOiBcInJnYmEoMCwwLDAsMC4yNClcIlxuXHR0b2FzdEJHLnN0YXRlcy5hZGRcblx0XHRvbjogb3BhY2l0eTogMVxuXHRcdG9mZjogb3BhY2l0eTogMFxuXHR0b2FzdEJHLnN0YXRlcy5hbmltYXRpb25PcHRpb25zID1cblx0XHRjdXJ2ZTogXCJlYXNlLW91dFwiXG5cdFx0dGltZTogMC40XG5cblx0IyMgQ3JlYXRlIHRvYXN0IG1lc3NhZ2Vcblx0dG9hc3RUZXh0ID0gbmV3IExheWVyXG5cdFx0bWlkWDogdG9hc3RCRy53aWR0aCAvIDIsIHk6IDQyXG5cdFx0d2lkdGg6IHRvYXN0Qkcud2lkdGggLSAxNDQsIGhlaWdodDogdG9hc3RCRy5oZWlnaHQgLSA4OFxuXHRcdGJhY2tncm91bmRDb2xvcjogbnVsbFxuXHRcdHN1cGVyTGF5ZXI6IHRvYXN0Qkdcblx0dG9hc3RUZXh0Lmh0bWwgPSB0b2FzdE1lc3NhZ2Vcblx0dG9hc3RUZXh0LnN0eWxlID1cblx0XHRcImZvbnQtc2l6ZVwiOiBcIjQycHhcIlxuXHRcdFwibGluZS1oZWlnaHRcIjogXCI2MHB4XCJcblx0XHRcImZvbnQtZmFtaWx5XCI6IFwiUm9ib3RvLVJlZ3VsYXIsIEFyaWFsLCBzYW5zLXNlcmlmXCJcblx0XHRcImNvbG9yXCI6IFwiI2ZmZlwiXG5cblx0IyMgQW5pbWF0aW9uIG9uIGxvYWRcblx0dG9hc3RCRy5zdGF0ZXMuc3dpdGNoKFwib25cIilcblx0dG9hc3RCRy5vbiBFdmVudHMuQW5pbWF0aW9uRW5kLCAtPlxuXHRcdFV0aWxzLmRlbGF5IDQsIC0+XG5cdFx0XHR0b2FzdEJHLnN0YXRlcy5zd2l0Y2goXCJvZmZcIilcblx0XHRcdHRvYXN0Qkcub24gRXZlbnRzLkFuaW1hdGlvbkVuZCwgLT5cblx0XHRcdFx0dGhpcy5kZXN0cm95KClcbiJdfQ==
